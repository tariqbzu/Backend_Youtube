1-> Create Directory
2-> npm init
3-> Create Readme.txt file

                Git Steps
            
            1- git init
            2- git add .
            3- git commit - m "New Commit"
            4- git branch -M main
            5- git remote add origin https://github.com/tariqbzu/your-repository.git
            6- git remote -v
            7- git push -u origin main
            

4-> Create public folder
5-> In public folder create temp folder
6-> In temp folder create .gitkeep file
7-> create .gitignore file 
8-> Go to gitignore generator to copy code and paste in .gitignore
9-> Create .env file
10-> Create src folder
11-> Create files in src folder 
            |--------->>    app.js, constants.js, index.js
12-> Go to package.json file and write
            "type" : "module",
            "dev": "nodemon src/index.js"
13-> install nodemon
            npm install --save-dev nodemon
            npm i -D nodemon
14-> In src folder
        |---> create folders controllers db middlewares models utils routes
15-> Install Prettier
        npm i -D prettier
        --> create .prettierrc 
        --> create .prettierignore

                    Database Connection

                        ---> Create Port and paste URL of Your DB Connection from Web in .env file
                        ---> Create Constant Variable in src/constants.js file 
                                " export const DB_NAME = "youtube" "

16-> Install Mongoose , Express and Dotenv
                npm i mongoose express dotenv

                //////////////  

                                import express from "express";
                                import mongoose from "mongoose";
                                import { DB_NAME } from "./constants";

                                const app = express()

                                        ( async () => {
                                                try {
                                                await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);
                                                app.on("Error: ", (error)=>{
                                                console.log("Error: ", error);
                                                throw error;
                                                }) 
                                                app.listen(process.env.PORT, ()=>{
                                                console.log(`App is Listening on Port ${process.env.PORT}`);    
                                                })
                                                } catch (error) {
                                                console.log("ERROR :", error);
                                                throw error;
                                                }
                                        })() // This double function called Efi Method 
                /////////////////////////////////////////////////////////////////////////

17->    Go to src/app.js
18->    Go Back to index.js

19->    install packages
                npm i cookie-parser cors  :-> Cors --> Cross origin Resource Sharing
                import these in app.js file

                <!------  MidleWare ------>
                                ----- when you create url in routes then we check browser is capable for receving this or not
                                        this called MidleWare , check something if user is login or not

20->    Make Changes in Utils folder
21->    Create Models in src/models
22->    Install Aggregation package
                -----  npm i mongoose-aggregate-paginate-v2
23->    Import this in Model video

24-> Install BCRYPT package
                ------  npm i bcrypt
                                // It's help you to hash your paswords

25-> Install Token package
                -----   npm i jsonweb token
                        // jwt ya jsonwebtoken for encryption uses

        This all doing in User models

26-> Goto .env file for tokens

                ///////////////////        File Handling   /////////////////////

                ---> Use Cloudinary
27-> Install packages multer and Cloudinary
                ---> npm install cloudinary
                ---> npm i multer

28-> Make file in utils/cloudinary.js

                //////////////////      CONTROLLERS  /////////////////

29-> Make Controllers

30-> Makes routes
31-> Go back to App.js for routes creation

                //////////////////       POSTMAN        /////////////////

32-> login controllers
33-> logout controllers
34-> 










https://stackblitz.com/edit/stackblitz-starters-anhzkv?file=models%2Fecommerce%2Fuser.model.js

https://console.cloudinary.com/pm/c-2e1bea86eeb044cab228e05bb0cb3b/getting-started

https://console.cloudinary.com/pm/c-2e1bea86eeb044cab228e05bb0cb3b/getting-started